<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bean.classMapper">
	<!-- 一对一关联表 -->
	<!-- 方式一：嵌套结果（关联表查询） -->
	<select id="getClass" parameterType="int" resultMap="getClass">
		select c.id as cid,c.name as cname,t.id as tid,t.name as tname
		from class c,teacher t 
		where c.id = t.id and c.id = #{id}
	</select>

	<!-- 
        resultMap 元素：  
            1)constructor：类在实例化时，用来注入结果到构造方法中  
                a)idArg:ID参数；标记结果作为ID可以帮助提高整体效能  
                b)arg:注入到构造方法的一个普通结果  
            2)id:一个ID结果；标记结果作为ID可以帮助提高整体效能  
            3)result:注入到字段或JavaBean属性的普通结果  
            4)association:一个复杂的类型关联；许多结果将包成这种类型  
            5)collection:复杂类型的集  
            6)discriminator:使用结果值来决定使用哪个结果映射  
                a)case:基于某些值的结果映射  
        
        1、resultMap下 id、result 元素:  
            1)property:映射到列结果的字段或属性  
            2)column:从数据库中得到的列名，或者是列名的重命名标签。这也是通常和会传递给resultSet.getString(columnName)方法参数中相同的字符串。  
            3)javaType:一个Java类的完全限定名，或一个类型别名（参加上面内建类型别名的列表）。如果你映射到一个JavaBean，MyBatis通常可以断定类型。  
            			然而，如果你映射到的是HashMap，那么你应该明确地指定javaType来保证所需的行为。  
            4)jdbcType:在这个表格之后的所支持的JDBC类型列表中的类型。JDBC类型是仅仅需要对插入，更新和删除操作可能为空的列进行处理。  
            			这是JDBC的需要，而不是MyBatis的。如果你直接使用JDBC编程，你需要指定这个类型-但仅仅对可能为空的值。  
            5)typeHandler:。使用这个属性，你可以覆盖默认的类型处理器。这个属性值是类的完全限定名或者是一个类型处理器的实现，或者是类型别名。             
        2、resultMap下 constructor 元素：将查询到的对象映射到javabean时，如果javabean的构造函数有参数，则可以使用该元素来指定  
        3、resultMap下 association 元素：关联，比如查询博客和该博客的用户，通过博客关联用户，association里面就是用户属性。  
        4、resultMap下 collection 元素：集合，一个博客下有很多文章，collection就是存放文章的集合属性。  
        5、resultMap下 discriminator 元素：鉴别器，有时一个单独的数据库查询也许返回很多不同（但是希望有些关联）数据类型的结果集。  
        									鉴别器元素就是被设计来处理这个情况的，还有包括类的继承层次结构。鉴别器非常容易理解，因为它的表现很像Java语言中的switch语句。
	-->
	<resultMap type="Class" id="getClass">
		<id property="id" column="cid" />
		<result property="name" column="cname" />

		<!-- 处理一对一关联表 -->
		<association property="teacher" javaType="Teacher">
			<id property="id" column="tid" />
			<result property="name" column="tname" />
		</association>
	</resultMap>

	<!-- 一对一关联表 -->
	<!-- 方式二：嵌套查询：（查询两次） -->
	<!-- 
	<select id="getTeacher" parameterType="int" resultType="Teacher"> 
		select * from teacher where id = #{id} 
	</select> 
	-->

	<select id="getAllClass" resultMap="getAllClass">
		select c.* from class c
	</select>

	<resultMap type="Class" id="getAllClass">
		<id property="id" column="id" />
		<result property="name" column="name" />

		<!-- 处理一对一关联表，通过select='id' 查询另外的一个查询配置 -->
		<association property="teacher" column="teacher_id" select="bean.teacherMapper.getTeacher">
			<id property="id" column="id" />
			<result property="name" column="name" />
		</association>
	</resultMap>


	<!-- 一对多关联表 -->
	<!-- 方式一：嵌套结果（关联表查询） -->
	<select id="getClassInfo" resultMap="getClassMap">
		select c.id as cid,c.name as cname,s.id as sid,s.name as sname 
		from class c,student s
		where c.id = s.class_id and c.id = #{id}
	</select>
	
	<resultMap type="Class" id="getClassMap">
		<id property="id" column="cid" />
		<result property="name" column="cname" />

		<!-- 处理一对多关联表 -->
		<collection property="students" ofType="Student">
			<id property="id" column="sid"/>
			<result property="name" column="sname"/>
		</collection>
	</resultMap>
	
	<!-- 一对多关联表 -->
	<!-- 方式二：嵌套查询：（查询两次） -->
	<select id="getAllClassInfo" resultMap="getAllClassMap">
		select c.* from class c
	</select>
	
	<!-- 方式一 -->
	<!-- <resultMap type="Class" id="getAllClassMap">
		<id property="id" column="id" />
		<result property="name" column="name" />

		处理一对多关联表
		<collection property="students" column="id" select="bean.studentMapper.getStudentByClass">
			<id property="id" column="id"/>
			<result property="name" column="name"/>
		</collection>
	</resultMap> -->
	
	<!-- 方式二 -->
	<resultMap type="Class" id="classStudentsMap">
		<id property="id" column="id" />
		<result property="name" column="name" />
	</resultMap>
	<resultMap type="Class" id="getAllClassMap" extends="classStudentsMap">
		<collection property="students" column="id" select="bean.studentMapper.getStudentByClass">
			<id property="id" column="id"/>
			<result property="name" column="name"/>
		</collection>
	</resultMap>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 加载属性方式加载 -->
	<properties resource="db.properties" />
	
	<!-- 禁用mybatis的内置缓存 -->
	<settings>
		<!-- 这个配置使全局的映射器启用或禁用缓存 -->  
		<!-- <setting name="cacheEnabled" value="false" /> -->
		<!-- 
			1、默认session
			2、多个应用节点访问Mysql数据库，务必要设置localCacheScope = STATEMENT
			3、因为同一个SESSION里面进行多次同样的查询过程中，另一个应用节点可能同时在更新数据库。但是，另一个节点的更新动作并不会导致本节点的本地一级缓存失效。 
		-->
		<setting name="localCacheScope" value="STATEMENT" />
		<setting name="jdbcTypeForNull" value="NULL" />
		
		
        <!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载 -->  
		<setting name="lazyLoadingEnabled" value="false" />
		
        <!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载 -->  
		<setting name="aggressiveLazyLoading" value="true" />
		
        <!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动） -->  
        <setting name="multipleResultSetsEnabled" value="true"/>  
        
        <!-- 使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动 -->  
        <setting name="useColumnLabel" value="true"/>  
        
        <!-- 允许JDBC支持生成的键。需要适合的驱动。如果设置为true则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如Derby） -->  
        <setting name="useGeneratedKeys" value="true"/>  
        
        <!-- 指定MyBatis如何自动映射列到字段/属性。PARTIAL只会自动映射简单，没有嵌套的结果。FULL会自动映射任意复杂的结果（嵌套的或其他情况） -->  
        <setting name="autoMappingBehavior" value="PARTIAL"/>  
        
        <!-- 配置默认的执行器。SIMPLE执行器没有什么特别之处。REUSE执行器重用预处理语句。BATCH执行器重用语句和批量更新 -->  
        <setting name="defaultExecutorType" value="SIMPLE"/> 
         
        <!-- 设置超时时间，它决定驱动等待一个数据库响应的时间 -->  
        <setting name="defaultStatementTimeout" value="25000"/> 
	</settings>

	<!-- 配置映射文件实体类别名 -->
	<typeAliases>
		<!-- 给单个实体类设置别名 -->
		<!-- <typeAlias type="bean.User" alias="User"/> -->

		<!-- 给整个包下面的实体类设置别名 -->
		<package name="bean" />
	</typeAliases>
	
	<!-- 类型处理器被用来将获取的值以合适的方式转换成Java类型 -->
	<typeHandlers>
		<!-- 根据jvaType、jdbcType，覆盖默认的StringTypeHandler类型处理器，也可以自定义 -->
		<typeHandler javaType="String" handler="handler.StringTypeHandler" />
	</typeHandlers>
	
	<!-- 对象工厂 -->
	<objectFactory type="po.MybatisObjectFactory">
		<property name="someProperty" value="100"/>
	</objectFactory>
	
	<!-- 插件 -->
	<plugins>
		<plugin interceptor="po.ExecutorPlugin">
			<property name="someProperty" value="100" />
		</plugin>
		<plugin interceptor="interceptor.PageInterceptor">
			<property name="databaseType" value="mysql"/>
		</plugin>
	</plugins>

	<!-- development:开发模式 work:工作模式 -->
	<environments default="development">
		<!-- 多个environment，需要指定SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader,"development1"); -->
		<!-- 环境配置1，每个SqlSessionFactory对应一个环境 -->
		<environment id="development1">
			<!--    
		                事务配置 type= JDBC、MANAGED  
		                1.JDBC:这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。  
		                2.MANAGED:这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期（比如Spring或JEE应用服务器的上下文）。  
		                默认情况下它会关闭连接。然而一些容器并不希望这样，因此如果你需要从连接中停止它，将closeConnection属性设置为false        
            --> 
			<transactionManager type="JDBC" />
            <!-- <transactionManager type="MANAGED">  
                <property name="closeConnection" value="false"/>  
            </transactionManager> -->  
             
			<!--    
		                数据源类型：type = UNPOOLED、POOLED、JNDI  
		      1.UNPOOLED：这个数据源的实现是每次被请求时简单打开和关闭连接。它有一点慢，这是对简单应用程序的一个很好的选择，因为它不需要及时的可用连接。  
		                                                不同的数据库对这个的表现也是不一样的，所以对某些数据库来说配置数据源并不重要，这个配置也是闲置的  
		      2.POOLED：这是JDBC连接对象的数据源连接池的实现，用来避免创建新的连接实例时必要的初始连接和认证时间。  
		                                          这是一种当前Web应用程序用来快速响应请求很流行的方法。  
              3.JNDI：这个数据源的实现是为了使用如Spring或应用服务器这类的容器，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用  
            -->  
			<dataSource type="UNPOOLED">
				<property name="driver" value="${driver}" />
				<property name="url" value="${url}" />
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
				
				<!-- 默认连接事务隔离级别  -->
                <!-- <property name="defaultTransactionIsolationLevel" value="" /> -->  
			</dataSource>
		</environment>
		
		<!-- 环境配置2 -->  
        <environment id="development2">  
            <transactionManager type="JDBC"/>  
            <dataSource type="POOLED">  
                <property name="driver" value="${driver}" />
				<property name="url" value="${url}" />
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
				
                <!-- 在任意时间存在的活动（也就是正在使用）连接的数量 -->  
                <property name="poolMaximumActiveConnections" value="10"/>
                
                <!-- 任意时间存在的空闲连接数 -->  
                <property name="poolMaximumIdleConnections" value="5"/>
                  
                <!-- 在被强制返回之前，池中连接被检查的时间 -->  
                <property name="poolMaximumCheckoutTime" value="20000"/>
                  
                <!-- 这是给连接池一个打印日志状态机会的低层次设置，还有重新尝试获得连接，这些情况下往往需要很长时间（为了避免连接池没有配置时静默失败） -->  
                <property name="poolTimeToWait" value="20000"/>
                
                <!-- 发送到数据的侦测查询，用来验证连接是否正常工作，并且准备接受请求。 -->  
                <property name="poolPingQuery" value="NO PING QUERY SET"/>  
                
                <!-- 这是开启或禁用侦测查询。如果开启，你必须用一个合法的SQL语句（最好是很快速的）设置poolPingQuery属性 -->  
                <property name="poolPingEnabled" value="false"/>  
                
                <!-- 这是用来配置poolPingQuery多次时间被用一次。这可以被设置匹配标准的数据库连接超时时间，来避免不必要的侦测 -->  
                <property name="poolPingConnectionsNotUsedFor" value="0"/>  
            </dataSource>  
        </environment>  
          
        <!-- 环境配置3 -->  
        <environment id="development3">  
            <transactionManager type="JDBC"/>  
            <dataSource type="JNDI">  
                <property name="data_source" value="java:comp/env/jndi/mybatis"/>  
                <property name="env.encoding" value="UTF8"/>  
                <!--   
                <property name="initial_context" value=""/>  
                <property name="env.encoding" value="UTF8"/>  
                 -->  
            </dataSource>  
        </environment> 
	</environments>

	<mappers>
		<mapper resource="bean/userMapper.xml" />
		<mapper class="po.UserMapper" />

		<mapper resource="bean/orderMapper.xml" />

		<mapper resource="bean/classMapper.xml" />
		<mapper resource="bean/teacherMapper.xml" />
		<mapper resource="bean/studentMapper.xml" />
	</mappers>
</configuration>